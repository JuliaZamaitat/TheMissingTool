<div id="canvas-wrap">
    <div id="overlay"></div>
</div>
<button type="button" class="btn btn-success" id="plus">
    <i class="fa fa-plus-circle" aria-hidden="true"></i>
    Add a card
</button>
<div id="chatWindow" class="card">
    <div id="chatHeader" class="card-header px-2 py-1 font-weight-bold">Chat</div>
    <div id="chatBody" class="card-body p-0">
        <div id="chatContent" class="p-1">
            <div class="msg">
                The chat is scrollable. Starts at the bottom.
            </div>
            <div class="msg">
                New messages will appear here.<br>
                Press <i>Enter</i> to send your message.<br>
                Press <i>Shift+Enter</i> for a new line.<br>
                <br><br><br><br><br><br><br><br><br><br><br>
            </div>
        </div>
    </div>
    <div id="chatInputContainer" class="card-footer input-group p-1">
        <textarea id="chatInput" class="form-control" rows="1" placeholder="Enter a message..."></textarea>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript" charset="utf-8">
    $(() => {
        var socket = io();

        window.onload = function () {
            $.get('/data', (data) => {
                data.forEach(createCard);
            })
        }

        socket.on('new-card', parseAndCreate)

        function parseAndCreate(data) {
            const obj = JSON.parse(data);
            createCard(obj)
        }

        function createCard(data) {
            const card = document.createElement('div');
            card.className = 'item animate';
            card.innerHTML = "<span type='button' class='deleteBtn rounded'><i class='fa fa-trash-o'></i></span><textarea type='text' value=''></textarea>";

            addListeners(card);

            card.id = data._id;
            card.style.left = data.position.left + 'px';
            card.style.top = data.position.top + 'px';
            card.style.fontSize = data.fontSize;
            card.style.backgroundColor = data.backgroundColor;
            if (data.text != null) {
                card.querySelector("textarea").value = data.text; //Show the card text if defined
            }
            document.getElementById('overlay').appendChild(card)
        }

        socket.on('pos-update', changePosition)

        function changePosition(data) {
            const card = JSON.parse(data);
            let cardById = document.getElementById(card._id);
            cardById.style.left = card.position.left + 'px';
            cardById.style.top = card.position.top + 'px';
        }

        $("#plus").click(() => {
            newCard({
                color: getRandomColor()
            });
        });

        function newCard(card) {
            $.post('/', card)
        }

        socket.on('delete-card', deleteCard)

        function deleteCard(data) {
            const card = JSON.parse(data);
            $('#' + card._id).remove(); //remove the card element by its ID
        }

        function addListeners(card) {
            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            card.onmousedown = cardMouseDown;

            function cardMouseDown(e) {
                card.classList.remove("animate");
                card.style.position = "absolute";
                card.style.zIndex = 1000;
                document.getElementById('overlay').append(card);
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragCard;
                document.onmousemove = dragCard;
            }

            function dragCard(e) {
                e.preventDefault();
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                card.style.top = (card.offsetTop - pos2) + "px";
                card.style.left = (card.offsetLeft - pos1) + "px";
            }

            function closeDragCard() {
                sendPosChange({
                    _id: card.id,
                    position: {
                        left: card.style.left.replace(/\D/g, ''),
                        top: card.style.top.replace(/\D/g, ''),
                    }
                });
                document.onmouseup = null;
                document.onmousemove = null;

            }

            function sendPosChange(update) {
                $.post('/update-pos', update)
            }

            card.ondragstart = function () {
                return false;
            };

            card.querySelector('.deleteBtn').addEventListener('mousedown', function (event) {
                event.stopPropagation();  //prevent bubbling process so the whole card doesn't start dragging
                const cardToDelete = {_id: event.currentTarget.parentElement.id};
                $.post('/delete-card', cardToDelete) //send card ID over for deletion
            });
            
            //Update the text on textarea change
            //TODO socket io

            card.querySelector('textarea').addEventListener('input', function(event) {
                sendTextChange({
                    _id: event.currentTarget.parentElement.id,
                    text: event.currentTarget.value
                })
            })

            function sendTextChange(update) {
                $.post('/update-text', update);
            }
        }

        function updateText(data) {
            const object = JSON.parse(data);
            console.log(object)
            let card = $('#' + object._id);
            console.log(object.text)
            card.find('textarea').val(object.text);
        }

        socket.on('text-update', updateText)
        
        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

                //Adjust chat content height, in case input height changes and scroll to bottom
                const rescaleChatContent = () => {        
            $('#chatContent').css('height', 'calc(100% - ' + $('#chatInputContainer').outerHeight() + 'px)');      
        };

        //Chat window's open/close mechanism
        $('#chatHeader').click(() => {
            $('#chatInputContainer').fadeToggle(300);
            $('#chatBody').slideToggle();
            rescaleChatContent();
            $('#chatContent').scrollTop(chatContent.scrollHeight); //Scroll to bottom
        });

        //Listens for chat keyboard input
        $('#chatInput').on('input keydown', function(e) {
            if((e.keyCode == 10 || e.keyCode == 13)) { //If Enter is pressed
                if (!e.shiftKey) { //If Shift is not pressed
                    //Prevent new line and send the message
                    e.preventDefault();
                    //Send message here...
                }
            }

            //Rescale textarea
            $(this).css('height', 'unset').height(this.scrollHeight-10);
            rescaleChatContent();
        });
    });
</script>